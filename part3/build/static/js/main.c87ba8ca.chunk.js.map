{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","axios","get","then","response","data","newObject","post","id","put","Notification","message","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","console","log","length","notesToShow","filter","Footer","style","color","fontStyle","fontSize","map","key","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","target","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","type","ReactDOM","render","document","getElementById"],"mappings":"kNAeeA,EAbF,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACbC,EAAQF,EAAKG,UACjB,qBAAuB,iBAEzB,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,K,gBCY3B,EAlBA,WAGb,OADiBK,IAAMC,IAJT,cAKCC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAe5B,EAVA,SAAAC,GAEb,OADgBL,IAAMM,KAXR,aAWsBD,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAhBF,aAgBE,YAAwBD,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCH5BK,G,MAZM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACrB,OAAgB,OAAZA,EACK,KAIP,yBAAKb,UAAU,SACZa,KC2GUC,EA/GL,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,0BAJjC,mBAITO,EAJS,KAIKC,EAJL,KAKhBC,qBAAU,WACRC,IAEGpB,MAAK,SAAAqB,GACFT,EAASS,QAEd,IACHC,QAAQC,IAAI,SAAUZ,EAAMa,OAAQ,SAGlC,IAAMC,EAAcV,EAChBJ,EACAA,EAAMe,QAAO,SAAAnC,GAAI,OAAuB,IAAnBA,EAAKG,aAuDxBiC,EAAS,WAMb,OACE,yBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAIR,6BACA,sCAKN,OAAQ,6BACN,qCACA,kBAAC,EAAD,CAAcvB,QAASS,IACvB,6BACE,4BAAQpB,QAAS,kBAAMmB,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BACGU,EAAYO,KAAI,SAAAzC,GAAI,OAAI,kBAAC,EAAD,CACvB0C,IAAK1C,EAAKc,GACVd,KAAMA,EACNC,iBAAkB,kBApDG,SAACa,GAC1BiB,QAAQC,IAAR,wBAA6BlB,EAA7B,yBACA,IAAMd,EAAOoB,EAAMuB,MAAK,SAAAC,GAAC,OAAIA,EAAE9B,KAAOA,KAChC+B,EAAW,2BAAQ7C,GAAR,IAAcG,WAAYH,EAAKG,YAEhD0B,EACUf,EAAI+B,GACXpC,MAAK,SAAAqC,GACJzB,EAASD,EAAMqB,KAAI,SAAAzC,GAAI,OAAIA,EAAKc,KAAOA,EAAId,EAAO8C,MACnDC,OAAM,SAAAC,GACLrB,EAAgB,aAAD,OAAc3B,EAAKK,QAAnB,0CACf4C,YAAW,WACTtB,EAAgB,QACf,KACHN,EAASD,EAAMe,QAAO,SAAAS,GAAC,OAAEA,EAAE9B,KAAOA,YAsCVoC,CAAmBlD,EAAKc,WAIpD,0BAAMqC,SAzEQ,SAACC,GACfA,EAAMC,iBACNtB,QAAQC,IAAI,cAAeoB,EAAME,QACjC,IAAMC,EAAa,CACjBlD,QAASiB,EACTkC,MAAM,IAAIC,MAAOC,cACjBvD,UAAWwD,KAAKC,SAAW,IAG7B/B,EACU0B,GACP9C,MAAK,SAAAqC,GACJzB,EAASD,EAAMyC,OAAOf,IACtBvB,EAAW,SA6Db,2BAAOuC,MAAOxC,EACZyC,SAhFmB,SAACX,GACxBrB,QAAQC,IAAIoB,EAAME,OAAOQ,OACzBvC,EAAW6B,EAAME,OAAOQ,UA+EtB,4BAAQE,KAAK,UAAb,SAEF,kBAAC5B,EAAD,QC5FN6B,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,W","file":"static/js/main.c87ba8ca.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({note, toggleImportance }) => {\n  const label = note.important\n  ? 'make not important' : 'make important'\n\n  return (\n    <li className='note'>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\n\nexport default Note\n","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n  // We no longer return the promise returned by axios directly. Instead, we assign the promise to the request variable and call its then method:\n  const request =  axios.get(baseUrl)\n  return request.then(response => response.data)\n\n\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default {\n  getAll,\n  create,\n  update\n}\n","import React from 'react'\n\n\nconst Notification = ({message}) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className='error'>\n      {message}\n    </div>\n  )\n}\n\nexport default Notification;\n","import React, {useState, useEffect} from \"react\"\nimport Note from './components/Note'\n// import axios from 'axios'\nimport noteService from './services/notes'\nimport './index.css'\nimport Notification from './components/Notification'\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('some error happened...')\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n          setNotes(initialNotes)\n      })\n  }, []) //empty array is run only on first render\n  console.log('render', notes.length, 'notes')\n\n\n    const notesToShow = showAll\n      ? notes\n      : notes.filter(note => note.important === true)\n\n      // if showAll:\n      //   notes\n      // else:\n      //   notes.filter blah -- I hate ternary operators\n\n    const handleNoteChange = (event) => {\n      console.log(event.target.value)\n      setNewNote(event.target.value)\n    }\n\n    const addNote = (event) => {\n      event.preventDefault()\n      console.log('buttonclick', event.target)\n      const noteObject = {\n        content: newNote,\n        date: new Date().toISOString(),\n        important: Math.random() < 0.5,\n      }\n\n      noteService\n        .create(noteObject)\n        .then(returnedNote => {\n          setNotes(notes.concat(returnedNote))\n          setNewNote('')\n        })\n\n    }\n    const toggleImportanceOf = (id) => {\n      console.log(`importance of ${id} needs to be toggled`)\n      const note = notes.find(n => n.id === id)\n      const changedNote = { ...note, important: !note.important } // agh, this takes in the note object, then changes that one variable\n\n      noteService\n        .update(id, changedNote)\n        .then(returnedNote => {\n          setNotes(notes.map(note => note.id !== id? note : returnedNote))\n        .catch(error => {\n          setErrorMessage(`the note '${note.content}' was already deleted from the server`)\n          setTimeout(()=>{\n            setErrorMessage(null)\n          }, 5000)\n          setNotes(notes.filter(n=>n.id !== id)) //urrrrgh, immutable deletes. Return an object with all ids except this one.\n        })\n        })\n      // axios\n      //   .put(url, changedNote)\n      //   .then(response => {\n      //       setNotes(notes.map(note => note.id !== id ? note : response.data ))\n      //       //yeah, these ternary operators suck.\n      //       //\n      //       // for all notes, write the note back into the object, unless it's the specific one we're getting the response for, then use the REST data\n      //   })\n    }\n    const Footer = () => {\n      const footerStyle = {\n        color: 'green',\n        fontStyle: 'italic',\n        fontSize: 16\n      }\n      return (\n        <div style={footerStyle}>\n          <br />\n          <em>blah</em>\n        </div>\n      )\n    }\n\n    return (<div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note => <Note\n          key={note.id}\n          note={note}\n          toggleImportance={() => toggleImportanceOf(note.id)}\n          />)}\n\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote}\n          onChange={handleNoteChange}/>\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>)\n  }\n\n  export default App;\n\n\n//\n// const App = (props) => {\n//   const [notes, setNotes] = useState(props.notes)\n//   const [newNote, setNewNote] = useState(\n//     'a new note'\n//   )\n//\n//   const [showAll, setShowAll] = useState(true)\n","import React from 'react'\nimport ReactDOM from \"react-dom\"\nimport App from './App'\n\n\n\n// const promise = axios.get('http://localhost:3001/notes')\n// console.log(promise)\n//\n// promise.then(response => {\n//   console.log(response)\n// })\n\n// const promise2 = axios.get('http://localhost:3001/foobar')\n//\n//\n// console.log(promise2)\n\n\n\n\nReactDOM.render(<App/>, document.getElementById('root'))\n\n//\n// axios\n//   .get(notesURL)\n//   .then(response => {\n//     const notes = response.data\n//\n//\n//     ReactDOM.render(\n//       <App notes={notes} />,\n//       document.getElementById('root')\n//     )\n//\n// })\n//\n// const notes = [\n//   {\n//     id: 1,\n//     content: \"HTML is easy\",\n//     date: \"2019-05-30T17:30:31.098Z\",\n//     important: true\n//   }, {\n//     id: 2,\n//     content: \"Browser can execute only Javascript\",\n//     date: \"2019-05-30T18:39:34.091Z\",\n//     important: false\n//   }, {\n//     id: 3,\n//     content: \"GET and POST are the most important methods of HTTP protocol\",\n//     date: \"2019-05-30T19:20:14.298Z\",\n//     important: true\n//   }\n// ]\n"],"sourceRoot":""}